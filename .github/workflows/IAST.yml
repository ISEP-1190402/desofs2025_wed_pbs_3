name: Full_Security_IAST (SAST + DAST = Simulador IAST)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 8081

jobs:
  iast-security:
    runs-on: ubuntu-latest
  #  if: github.event_name == 'pull_request' && success()
    timeout-minutes: 25

    steps:
    # 0. Aprovar Pull_request 
    - name: iAuto-approve if security passed
      uses: hmarr/auto-approve-action@v3
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}

    # 1. Checkout código
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. Setup .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '8.0.x'

    # 3. Restaurar dependências
    - name: Restore dependencies
      run: dotnet restore ./LibraryOnlineRentalSystem/LibraryOnlineRentalSystem.csproj

    # 4. Instalar Snyk CLI
    - name: Install Snyk CLI
      run: npm install -g snyk@latest

    # 5. Rodar Snyk (SAST + Deps) e exportar SARIF
    - name: Run Snyk Scans
      working-directory: ./LibraryOnlineRentalSystem
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mkdir -p ./snyk_results
        snyk test --file=LibraryOnlineRentalSystem.csproj --all-projects --sarif-file-output=./snyk_results/snyk-deps.sarif || true
        snyk code test --severity-threshold=high --sarif-file-output=./snyk_results/snyk-code.sarif || true
        ls -la ./snyk_results/

    - name: Upload Snyk SARIF
      uses: actions/upload-artifact@v4
      with:
        name: snyk-sarif-results
        path: |
          ./LibraryOnlineRentalSystem/snyk_results/snyk-deps.sarif
          ./LibraryOnlineRentalSystem/snyk_results/snyk-code.sarif

    # 5. Build imagem Docker
    - name: Build Docker Image
      working-directory: ./LibraryOnlineRentalSystem
      run: docker build -t $DOCKER_IMAGE_NAME .

    - name: Create Docker Network
      run: docker network create zap-net

    # 6. Prepara API no container
    - name: Run API Container
      run: |
        docker run -d \
          --name api \
          --network zap-net \
          -p $API_PORT:$API_PORT \
          -e ASPNETCORE_URLS=http://+:$API_PORT \
          $DOCKER_IMAGE_NAME
        
        # Aguardar a API inicializar
        echo "Aguardando API inicializar..."
        for i in {1..30}; do
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          if curl -s -f http://$API_IP:$API_PORT/health > /dev/null 2>&1 || \
             curl -s -f http://$API_IP:$API_PORT > /dev/null 2>&1; then
            echo "API está respondendo!"
            break
          fi
          echo "Tentativa $i/30 - API ainda não está pronta..."
          sleep 10
        done
        
        # Verificar logs se ainda não estiver funcionando
        echo "Logs do container API:"
        docker logs api

    # 7. ZAP Scan
    - name: Run OWASP ZAP Scan
      run: |
        API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
        echo "API container IP: $API_IP"
        echo "Testando conectividade com a API..."
        
        # Teste de conectividade
        if ! curl -s -f http://$API_IP:${{ env.API_PORT }} > /dev/null 2>&1; then
          echo "ERRO: Não foi possível conectar à API em http://$API_IP:${{ env.API_PORT }}"
          echo "Logs do container:"
          docker logs api
          exit 1
        fi
        
        mkdir -p $GITHUB_WORKSPACE/zap-work
        chmod -R 777 $GITHUB_WORKSPACE/zap-work
        
        docker run --rm \
          --network zap-net \
          -v $GITHUB_WORKSPACE/zap-work:/zap/wrk:rw \
          ghcr.io/zaproxy/zaproxy:stable \
          zap-baseline.py \
          -t http://$API_IP:${{ env.API_PORT }} \
          -J report_json.json \
          -w report_md.md \
          -r report_html.html \
          -I

    # 8. Upload dos arquivos gerados OWASP ZAP
    - name: Upload ZAP Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: zap-reports_iast
        path: zap-work/
      
    # 9. Stop Container  
    - name: Stop API Container
      if: always()
      run: |
        docker stop api || true
        docker rm api || true
        docker network rm zap-net || true