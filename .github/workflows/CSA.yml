name: CSA Pipeline (Sonar + Snyk + ZAP)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 5000
  PROJECT_DIR: ./LibraryOnlineRentalSystem
  SONAR_PROJECT_KEY: jorgealmeidadeveloper_LibraryOnlineRentalSystem
  SONAR_ORG: jorgealmeidadeveloper
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_HOST_URL: https://sonarcloud.io

jobs:
  csa:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout-Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Setup Java 17 (Sonar Requirement)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner --version 5.15.0

      - name: Add dotnet tools to PATH
        run: echo "${HOME}/.dotnet/tools" >> $GITHUB_PATH

      - name: Verify SonarCloud Config
        run: |
          echo "Project Key: ${{ env.SONAR_PROJECT_KEY }}"
          echo "Organization: ${{ env.SONAR_ORG }}"
          echo "Host URL: ${{ env.SONAR_HOST_URL }}"
          [[ -z "${{ env.SONAR_PROJECT_KEY }}" ]] && echo "❌ SONAR_PROJECT_KEY is not set" && exit 1
          [[ -z "${{ env.SONAR_ORG }}" ]] && echo "❌ SONAR_ORG is not set" && exit 1

      - name: Create SonarCloud Project (if needed)
        run: |
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ env.SONAR_TOKEN }}" \
            "https://sonarcloud.io/api/projects/search?projects=${{ env.SONAR_PROJECT_KEY }}")

          if [ "$HTTP_CODE" != "200" ]; then
            echo "Creating new SonarCloud project..."
            curl -X POST \
              -H "Authorization: Bearer ${{ env.SONAR_TOKEN }}" \
              -H "Content-Type: application/x-www-form-urlencoded" \
              -d "project=${{ env.SONAR_PROJECT_KEY }}&name=${{ github.event.repository.name }}&organization=${{ env.SONAR_ORG }}" \
              "https://sonarcloud.io/api/projects/create" || echo "⚠️ Project creation failed"
          else
            echo "✅ Project already exists"
          fi

      - name: Restore NuGet Packages
        working-directory: ${{ env.PROJECT_DIR }}
        run: dotnet restore

      - name: SonarCloud Begin Analysis
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ env.SONAR_PROJECT_KEY }}" \
            /o:"${{ env.SONAR_ORG }}" \
            /d:sonar.host.url="${{ env.SONAR_HOST_URL }}" \
            /d:sonar.token="${{ env.SONAR_TOKEN }}" \
            /d:sonar.cs.opencover.reportsPaths=**/coverage.opencover.xml \
            /d:sonar.coverage.exclusions="**/Migrations/**,**/wwwroot/**,**/*Tests*/**"

      - name: Build Solution
        working-directory: ${{ env.PROJECT_DIR }}
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests with Coverage
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          dotnet test --configuration Release --no-build --no-restore \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults/ \
            --logger trx \
            --verbosity normal \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

      - name: SonarCloud End Analysis
        working-directory: ${{ env.PROJECT_DIR }}
        run: dotnet sonarscanner end /d:sonar.token="${{ env.SONAR_TOKEN }}"

      - name: Setup Snyk
        uses: snyk/actions/setup@master

      - name: Snyk Code Scan
        run: snyk code test --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Build Docker Image
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Creating default Dockerfile..."
            cat > Dockerfile << 'EOF'
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS runtime
WORKDIR /app
COPY bin/Release/net8.0/publish/ .
EXPOSE 5000
ENTRYPOINT ["dotnet", "LibraryOnlineRentalSystem.dll"]
EOF
            dotnet publish --configuration Release --output bin/Release/net8.0/publish/
          fi
          docker build -t $DOCKER_IMAGE_NAME .

      - name: Snyk Container Scan
        run: snyk container test ${{ env.DOCKER_IMAGE_NAME }} --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

      - name: Create Docker Network
        run: docker network create zap-net || true

      - name: Run API Container
        run: |
          docker run -d --name api --network zap-net -p ${{ env.API_PORT }}:${{ env.API_PORT }} \
            -e ASPNETCORE_URLS=http://+:${{ env.API_PORT }} \
            -e ASPNETCORE_ENVIRONMENT=Development \
            ${{ env.DOCKER_IMAGE_NAME }}

      - name: Wait for API to Start
        run: |
          for i in {1..30}; do
            if docker exec api curl -f http://localhost:${{ env.API_PORT }}/health 2>/dev/null; then
              echo "API is ready!"
              break
            fi
            echo "Waiting for API to be ready... Attempt $i"
            sleep 2
          done

      - name: Get API IP
        id: api_ip
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "api_ip=$API_IP" >> $GITHUB_OUTPUT

      - name: Run OWASP ZAP Scan
        run: |
          mkdir -p zap-work && chmod -R 777 zap-work

          cat > zap-work/automation.yaml <<EOF
env:
  contexts:
    - name: "Library API"
      urls: ["http://${{ steps.api_ip.outputs.api_ip }}:${{ env.API_PORT }}"]
      includePaths:
        - "http://${{ steps.api_ip.outputs.api_ip }}:${{ env.API_PORT }}/.*"
      excludePaths:
        - ".*\\.js$"
        - ".*\\.css$"
        - ".*\\.png$"
        - ".*\\.jpg$"
  parameters:
    failOnError: false
    failOnWarning: false
    progressToStdout: true

jobs:
  - type: spider
    parameters:
      context: "Library API"
      url: "http://${{ steps.api_ip.outputs.api_ip }}:${{ env.API_PORT }}"
      maxDuration: 3
      maxDepth: 3

  - type: activeScan
    parameters:
      context: "Library API"
      inScopeOnly: true
      policy: "Default Policy"

  - type: report
    parameters:
      template: "traditional-json"
      reportDir: "/zap/wrk"
      reportFile: "zap-report.json"

  - type: report
    parameters:
      template: "traditional-html"
      reportDir: "/zap/wrk"
      reportFile: "zap-report.html"
EOF

          docker run --rm --network zap-net \
            -v ${{ github.workspace }}/zap-work:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap.sh -cmd -autorun /zap/wrk/automation.yaml

      - name: Process ZAP Results
        if: always()
        run: |
          if [ -f "zap-work/zap-report.json" ]; then
            echo "📊 ZAP Scan Results:"
            jq -r '.site[0].alerts[]? | "🚨 \(.name) - Risk: \(.riskdesc) - Count: \(.count)"' zap-work/zap-report.json | head -10 || true
          else
            echo "⚠️ ZAP report not found."
          fi

      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-report
          path: zap-work/
          retention-days: 30

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: ${{ env.PROJECT_DIR }}/TestResults/
          retention-days: 30

      - name: Security Scan Summary
        if: always()
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Tool | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| SonarCloud | ✅ | Code quality and security analysis completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk Code | ⚠️ | Static scan completed |" >> $GITHUB_STEP_SUMMARY
          echo "| Snyk Container | ⚠️ | Container scan completed |" >> $GITHUB_STEP_SUMMARY
          echo "| OWASP ZAP | ⚠️ | Dynamic security testing done |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📋 Check artifacts for full results." >> $GITHUB_STEP_SUMMARY

      - name: Cleanup Docker Resources
        if: always()
        run: |
          docker stop api || true
          docker rm api || true
          docker network rm zap-net || true
          docker rmi ${{ env.DOCKER_IMAGE_NAME }}
