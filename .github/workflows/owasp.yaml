name: .NET API Security Scan

on:
  push:
    branches: [ main]
  pull_request:
    branches: [ main]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 8080  # Porta da sua API (ajuste se necessário)

jobs:
  security-scans:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1. Checkout do código
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Configura .NET e restaura dependências
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Build da imagem Docker
      - name: Build Docker Image
        run: |
          docker build -t $DOCKER_IMAGE_NAME .

      # 4. Inicia o container da API
      - name: Run API Container
        run: |
          docker run -d -p $API_PORT:$API_PORT --name api $DOCKER_IMAGE_NAME
          sleep 10  # Espera a API iniciar

      # 5. SonarCloud Scan (requer SONAR_TOKEN nos secrets)
      - name: SonarCloud Analysis
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # 6. OWASP ZAP Scan (na API local)
      - name: API Security Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          target: http://localhost:$API_PORT  # Altere para o endpoint da sua API (ex: /api)
          args: -r  # Gera relatório
        timeout-minutes: 5

      # 7. Parar o container e salvar relatório
      - name: Stop Container
        if: always()
        run: docker stop api && docker rm api

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v3
        with:
          name: zap-security-report
          path: zap-report.html