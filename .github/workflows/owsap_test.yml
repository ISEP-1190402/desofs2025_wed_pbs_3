name: DAST Analysis (OWASP ZAP)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 5000
  PROJECT_DIR: ./LibraryOnlineRentalSystem

jobs:
  dast-zap:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build Docker Image
        working-directory: ${{ env.PROJECT_DIR }}
        run: docker build -t $DOCKER_IMAGE_NAME .

      - name: Create Docker Network
        run: docker network create zap-net

      - name: Run API Container
        run: |
          docker run -d \
            --name api \
            --network zap-net \
            -p ${{ env.API_PORT }}:${{ env.API_PORT }} \
            ${{ env.DOCKER_IMAGE_NAME }}

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start..."
          timeout=60
          while [ $timeout -gt 0 ]; do
            if docker logs api 2>&1 | grep -q "Now listening on\|Application started\|Started"; then
              echo "API is ready!"
              break
            fi
            sleep 2
            timeout=$((timeout-2))
          done
          
          if [ $timeout -le 0 ]; then
            echo "API failed to start within timeout"
            docker logs api
            exit 1
          fi
          
          # Additional wait to ensure API is fully ready
          sleep 5

      - name: Verify API connectivity
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "API IP: $API_IP"
          
          # Test connectivity from within the network
          docker run --rm --network zap-net alpine/curl:latest \
            curl -f -s -o /dev/null -w "%{http_code}" \
            http://$API_IP:${{ env.API_PORT }}/health || \
          docker run --rm --network zap-net alpine/curl:latest \
            curl -f -s -o /dev/null -w "%{http_code}" \
            http://$API_IP:${{ env.API_PORT }}/ || \
          echo "API connectivity test completed"

      - name: Run OWASP ZAP Scan
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "Starting ZAP scan against API at: http://$API_IP:${{ env.API_PORT }}"
          
          mkdir -p zap-work
          chmod -R 777 zap-work

          docker run --rm \
            --network zap-net \
            -v ${{ github.workspace }}/zap-work:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://$API_IP:${{ env.API_PORT }} \
            -J /zap/wrk/report_json.json \
            -w /zap/wrk/report_md.md \
            -r /zap/wrk/report_html.html \
            -I \
            -d

      - name: Check ZAP Reports
        run: |
          echo "Checking generated reports..."
          ls -la zap-work/
          if [ -f "zap-work/report_json.json" ]; then
            echo "JSON report generated successfully"
          else
            echo "JSON report not found"
          fi

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: zap-work/

      - name: Display API Logs (if scan failed)
        if: failure()
        run: |
          echo "=== API Container Logs ==="
          docker logs api

      - name: Stop and Remove API Container
        if: always()
        run: |
          docker stop api || true
          docker rm api || true
          docker network rm zap-net || true