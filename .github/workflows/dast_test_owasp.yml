name: DAST

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 5000
  PROJECT_DIR: LibraryOnlineRentalSystem

jobs:
  security-scans_DAST:
    runs-on: ubuntu-latest
    timeout-minutes: 25
    
    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # 3. Cache .NET packages
      - name: Cache .NET packages
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-path: ~/.nuget/packages

      # 4. Build Docker Image
      - name: Build Docker Image
        working-directory: ./${{ env.PROJECT_DIR }}
        run: |
          echo "Building Docker image from $(pwd)"
          docker build -t $DOCKER_IMAGE_NAME .

      # 5. Create Docker Network
      - name: Create Docker Network
        run: docker network create zap-net

      # 6. Run API Container
      - name: Run API Container
        run: |
          docker run -d \
            --name api \
            --network zap-net \
            -p $API_PORT:$API_PORT \
            -e ASPNETCORE_URLS=http://+:${API_PORT} \
            --health-cmd="curl -f http://localhost:$API_PORT/health || exit 1" \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=3 \
            $DOCKER_IMAGE_NAME

      # 7. Wait for API Health Check
      - name: Wait for API Health Check
        run: |
          echo "Waiting for API to be healthy..."
          timeout 120s bash -c 'until docker inspect --format="{{.State.Health.Status}}" api | grep -q "healthy"; do
            echo "API container status: $(docker inspect --format="{{.State.Health.Status}}" api)"
            sleep 5
          done'
          echo "API is ready!"

      # 8. Install SonarScanner
      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      # 9. Start SonarCloud Analysis
      - name: Start SonarCloud Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"jorgealmeidadeveloper_LibraryOnlineRentalSystem" \
            /o:"jorgealmeidadeveloper" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.dotnet.buildConfiguration="Release"

      # ✅ 10. Build the solution (.sln is mandatory for correct analysis)
      - name: Build Solution
        run: dotnet build LibraryOnlineRentalSystem --configuration Release

      # 11. Run OWASP ZAP DAST Scan
      - name: Run OWASP ZAP DAST Scan
        run: |
          mkdir -p $GITHUB_WORKSPACE/zap-reports
          chmod -R 777 $GITHUB_WORKSPACE/zap-reports
          
          docker run --rm \
            --network zap-net \
            -v $GITHUB_WORKSPACE/zap-reports:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://api:${{ env.API_PORT }} \
            -J zap-report.json \
            -w zap-report.md \
            -r zap-report.html \
            -x zap-report.xml \
            -I \
            -d

      # 12. Process ZAP Results
      - name: Process ZAP Results
        if: always()
        run: |
          echo "ZAP scan completed. Report files:"
          ls -la $GITHUB_WORKSPACE/zap-reports/
          
          if [ -f "$GITHUB_WORKSPACE/zap-reports/zap-report.json" ]; then
            echo "Analyzing security findings..."
          fi

      # 13. Upload ZAP Reports
      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-security-reports-${{ github.run_number }}
          path: zap-reports/
          retention-days: 30

      # 14. Security Summary
      - name: Security Scan Summary
        if: always()
        run: |
          echo "## 🔒 DAST Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Target**: API Container on port ${{ env.API_PORT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Scan Type**: OWASP ZAP Baseline" >> $GITHUB_STEP_SUMMARY
          echo "- **Reports**: Available in artifacts" >> $GITHUB_STEP_SUMMARY
          
          if [ -f "$GITHUB_WORKSPACE/zap-reports/zap-report.json" ]; then
            echo "- **Status**: ✅ Scan completed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status**: ❌ Scan failed or no reports generated" >> $GITHUB_STEP_SUMMARY
          fi

      # 15. Cleanup
      - name: Cleanup Containers
        if: always()
        run: |
          docker stop api || true
          docker rm api || true
          docker network rm zap-net || true

      # 16. Complete SonarCloud Analysis
      - name: Complete SonarCloud Analysis
        if: always()
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
