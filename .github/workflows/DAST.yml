name: DAST (OWASP ZAP)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 5000
  PROJECT_DIR: ./LibraryOnlineRentalSystem
  JAVA_HOME: ${{ secrets.JAVA_HOME }}
  Keycloak_Audience: ${{ secrets.KEYCLOAK_AUDIENCE }}
  Keycloak_Authority: ${{ secrets.KEYCLOAK_AUTHORITY }}
  Keycloak_ClientId: ${{ secrets.KEYCLOAK_CLIENTID }}
  Keycloak_Password: ${{ secrets.KEYCLOAK_PASSWORD }}
  Keycloak_URL: ${{ secrets.KEYCLOAK_URL }}
  Keycloak_Username: ${{ secrets.KEYCLOAK_USERNAME }}
  KEYCLOAK_ADMIN: ${{ secrets.KEYCLOAK_ADMIN }}
  KEYCLOAK_ADMIN_PASSWORD: ${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
  LibraryDatabase: ${{ secrets.LIBRARYDATABASE }}

jobs:
  dast-zap:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && success()
    timeout-minutes: 20

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Build Docker Image
        working-directory: ${{ env.PROJECT_DIR }}
        run: docker build -t $DOCKER_IMAGE_NAME .

      - name: Create Docker Network
        run: docker network create zap-net

      - name: Run API Container
        run: |
          echo "Building and starting API container..."

          docker run -d \
            --name api \
            --network zap-net \
            -p ${{ env.API_PORT }}:${{ env.API_PORT }} \
            -e ASPNETCORE_URLS=http://+:${{ env.API_PORT }} \
            -e ASPNETCORE_ENVIRONMENT=Development \
            -e JAVA_HOME="${JAVA_HOME}" \
            -e Keycloak_Audience="${Keycloak_Audience:-dev}" \
            -e Keycloak_Authority="${Keycloak_Authority:-dev}" \
            -e Keycloak_ClientId="${Keycloak_ClientId:-dev}" \
            -e Keycloak_Password="${Keycloak_Password:-dev}" \
            -e Keycloak_URL="${Keycloak_URL:-dev}" \
            -e Keycloak_Username="${Keycloak_Username:-dev}" \
            -e KEYCLOAK_ADMIN="${KEYCLOAK_ADMIN:-admin}" \
            -e KEYCLOAK_ADMIN_PASSWORD="${KEYCLOAK_ADMIN_PASSWORD:-admin}" \
            -e LibraryDatabase="${LibraryDatabase:-dev}" \
            ${{ env.DOCKER_IMAGE_NAME }}

      - name: Wait for API to be ready and get network info
        run: |
          echo "Waiting for API to start..."
          sleep 15
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "API Container IP: $API_IP"
          docker ps | grep api
          docker logs api --tail 20
          echo "Testing network connectivity..."
          docker run --rm --network zap-net alpine:latest ping -c 3 $API_IP || echo "Ping failed"

      - name: Test API connectivity with retries
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "Testing API connectivity at: http://$API_IP:${{ env.API_PORT }}"
          for endpoint in "" "/" "/health" "/swagger"; do
            echo "Testing endpoint: $endpoint"
            docker run --rm --network zap-net curlimages/curl:latest \
              curl -v --connect-timeout 10 --max-time 30 \
              http://$API_IP:${{ env.API_PORT }}$endpoint || echo "Failed to connect to $endpoint"
          done
          echo "Final connectivity test..."
          docker run --rm --network zap-net curlimages/curl:latest \
            curl -I --connect-timeout 10 --max-time 30 \
            http://$API_IP:${{ env.API_PORT }} && echo "API is accessible!" || echo "API is not accessible"

      - name: Run OWASP ZAP Scan
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "Starting ZAP scan against API at: http://$API_IP:${{ env.API_PORT }}"
          mkdir -p zap-work && chmod -R 777 zap-work
          cat > zap-work/automation.yaml << 'EOF'
          env:
            contexts:
              - name: "Default"
                urls: ["http://TARGET_URL:TARGET_PORT"]
                includePaths: 
                  - "http://TARGET_URL:TARGET_PORT/.*"
            parameters:
              failOnError: false
              failOnWarning: false
              progressToStdout: true
          jobs:
            - type: spider
              parameters:
                context: "Default"
                url: "http://TARGET_URL:TARGET_PORT"
                maxDuration: 5
            - type: activeScan  
              parameters:
                context: "Default"
                policy: "Default Policy"
                maxDuration: 10
                inScopeOnly: true
            - type: report
              parameters:
                template: "traditional-json"
                reportDir: "/zap/wrk"
                reportFile: "report_json.json"
            - type: report
              parameters:
                template: "traditional-html"
                reportDir: "/zap/wrk"
                reportFile: "report_html.html"
            - type: report
              parameters:
                template: "traditional-md"
                reportDir: "/zap/wrk"
                reportFile: "report_md.md"
          EOF
          sed -i "s/TARGET_URL/$API_IP/g" zap-work/automation.yaml
          sed -i "s/TARGET_PORT/${{ env.API_PORT }}/g" zap-work/automation.yaml
          docker run --rm \
            --network zap-net \
            -v ${{ github.workspace }}/zap-work:/zap/wrk/:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap.sh -cmd -autorun /zap/wrk/automation.yaml || {
              echo "ZAP automation failed, trying baseline scan..."
              docker run --rm \
                --network zap-net \
                -v ${{ github.workspace }}/zap-work:/zap/wrk/:rw \
                ghcr.io/zaproxy/zaproxy:stable \
                zap-baseline.py \
                -t http://$API_IP:${{ env.API_PORT }} \
                -J /zap/wrk/report_json_baseline.json \
                -w /zap/wrk/report_md_baseline.md \
                -r /zap/wrk/report_html_baseline.html \
                -I -d --hook=/zap/auth_hook.py || echo "Both ZAP scans failed, but continuing..."
            }

      - name: Check ZAP Reports
        run: |
          echo "Checking generated reports..."
          ls -la zap-work/
          if [ -f "zap-work/report_json.json" ]; then
            echo "JSON report generated successfully"
          else
            echo "JSON report not found"
          fi

      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: zap-work/

      - name: Display API Logs (if scan failed)
        if: failure()
        run: |
          echo "=== API Container Logs ==="
          docker logs api

      - name: Stop and Remove API Container
        if: always()
        run: |
          docker stop api || true
          docker rm api || true
          docker network rm zap-net || true
