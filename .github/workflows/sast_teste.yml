name: Snyk SAST Code 

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  sast-scan:
    name: Run Snyk Code SAST 
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      actions: read
      id-token: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        path: ./src

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install Snyk CLI and PDF tools
      run: |
        npm install -g snyk@latest
        npm install -g puppeteer
        sudo apt-get update
        sudo apt-get install -y wkhtmltopdf

    - name: Create results directories
      working-directory: ./src
      run: |
        mkdir -p ./snyk_results/json
        mkdir -p ./snyk_results/sarif
        mkdir -p ./snyk_results/reports

    - name: Run Snyk Code SAST Scan
      working-directory: ./src
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        echo "Running Snyk static code analysis..."
        snyk code test --json > ./snyk_results/json/snyk-code.json || true
        snyk code test --sarif-file-output=./snyk_results/sarif/snyk-code.sarif || true

    - name: Run Snyk Open Source Dependency Scan
      working-directory: ./src
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      run: |
        echo "Running Snyk dependency scan..."
        snyk test --json > ./snyk_results/json/snyk-deps.json || true
        snyk test --sarif-file-output=./snyk_results/sarif/snyk-deps.sarif || true

    - name: Create PDF report generator script
      run: |
        cat > ./src/generate_report.py << 'EOF'
        # ⚠️ Substitua isso pelo script Python final depois
        # Exemplo mínimo para incluir vulnerabilidades de código e dependências
        import json
        from pathlib import Path

        def load_json(path):
            try:
                with open(path) as f:
                    return json.load(f)
            except:
                return {}

        code = load_json("./src/snyk_results/json/snyk-code.json")
        deps = load_json("./src/snyk_results/json/snyk-deps.json")

        html = "<h1>Snyk Security Report</h1>"

        html += "<h2>Code Vulnerabilities</h2>"
        if 'runs' in code:
            html += f"<p>Runs found: {len(code['runs'])}</p>"
        else:
            html += "<p>No code issues found or failed to parse.</p>"

        html += "<h2>Dependency Vulnerabilities</h2>"
        if 'vulnerabilities' in deps:
            html += f"<p>Issues found: {len(deps['vulnerabilities'])}</p>"
            for vuln in deps['vulnerabilities']:
                html += f"<div><strong>{vuln.get('title')}</strong><br>"
                html += f"Package: {vuln.get('packageName')}<br>"
                html += f"Severity: {vuln.get('severity')}<br>"
                html += f"ID: {vuln.get('id')}</div><br>"
        else:
            html += "<p>No dependency issues found or failed to parse.</p>"

        # Save HTML to file
        with open("./src/snyk_results/reports/security_report.html", "w") as f:
            f.write(html)

        # Convert to PDF
        import pdfkit
        pdfkit.from_file("./src/snyk_results/reports/security_report.html", "./src/snyk_results/reports/security_report.pdf")
        EOF

    - name: Install Python dependencies
      run: |
        pip3 install pdfkit

    - name: Generate PDF Report
      run: |
        python3 ./src/generate_report.py

    - name: Verify generated files
      run: |
        ls -la ./src/snyk_results/reports/
        file ./src/snyk_results/reports/security_report.pdf || echo "PDF not found"

    - name: Upload SAST Report Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: snyk-sast-reports
        path: |
          ./src/snyk_results/reports/
          ./src/snyk_results/json/
          ./src/snyk_results/sarif/

    - name: Upload SARIF to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: ./src/snyk_results/sarif/snyk-code.sarif
        category: snyk-code
      continue-on-error: true
      if: always()
