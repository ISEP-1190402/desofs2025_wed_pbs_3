name: Análise de Segurança para API .NET

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  NOME_IMAGEM_DOCKER: library-api
  PORTA_API: 8080
  VERSAO_AGENTE_CONTRAST: 4.13.0
  VERSAO_SONARQUBE: 9.9.1

jobs:
  analises-seguranca:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Tempo aumentado para as verificações adicionais

    steps:
      # 1. Baixar código
      - name: Baixar código
        uses: actions/checkout@v4.1.1

      # 2. Configurar .NET
      - name: Configurar .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Verificar arquivos (debug)
      - name: Verificar arquivos
        run: |
          echo "Conteúdo do diretório raiz:"
          ls -la
          echo "Conteúdo do diretório do projeto:"
          ls -la ${{ env.PROJECT_DIR }}
          echo "Verificando Dockerfile:"
          ls -la ${{ env.PROJECT_DIR }}/Dockerfile || echo "Dockerfile não encontrado"
          cat ${{ env.PROJECT_DIR }}/Dockerfile || true

      # 4. SAST: Análise SonarCloud (no início do processo)
      - name: Instalar SonarScanner para .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Iniciar Análise SonarCloud
        run: |
          dotnet sonarscanner begin \
            /k:"jorgealmeidadeveloper_LibraryOnlineRentalSystem" \
            /o:"jorgealmeidadeveloper" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.dotnet.buildConfiguration="Release"

      # 5. Construir imagem Docker com Agente IAST (exemplo Contrast Security)
      - name: Construir Imagem Docker com IAST
        working-directory: ./LibraryOnlineRentalSystem
        run: |
          # Baixar agente Contrast .NET Core
          wget "https://repo.maven.apache.org/maven2/com/contrastsecurity/contrast-agent/$VERSAO_AGENTE_CONTRAST/contrast-agent-$VERSAO_AGENTE_CONTRAST.zip" -O contrast-agent.zip
          unzip contrast-agent.zip -d contrast-agent
          
          # Construir imagem Docker com agente Contrast
          docker build -t $NOME_IMAGEM_DOCKER \
            --build-arg CONTRAST_AGENT_PATH=./contrast-agent \
            --build-arg CONTRAST_API_KEY="${{ secrets.CONTRAST_API_KEY }}" \
            --build-arg CONTRAST_SERVICE_KEY="${{ secrets.CONTRAST_SERVICE_KEY }}" \
            --build-arg CONTRAST_USERNAME="${{ secrets.CONTRAST_USERNAME }}" \
            .

      # 6. Criar rede e executar API com IAST
      - name: Criar Rede Docker
        run: docker network create zap-net
      
      - name: Executar Container API com IAST
        run: |
          docker run -d \
            --name api \
            --network zap-net \
            -p $PORTA_API:$PORTA_API \
            -e CONTRAST__API__URL=https://app.contrastsecurity.com \
            -e CONTRAST__API__API_KEY="${{ secrets.CONTRAST_API_KEY }}" \
            -e CONTRAST__API__SERVICE_KEY="${{ secrets.CONTRAST_SERVICE_KEY }}" \
            -e CONTRAST__API__USER_NAME="${{ secrets.CONTRAST_USERNAME }}" \
            $NOME_IMAGEM_DOCKER
          sleep 15  # Dar mais tempo para o agente IAST inicializar

      # 7. DAST: Verificação OWASP ZAP (sua verificação existente)
      - name: Executar Verificação OWASP ZAP
        run: |
          IP_API=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "IP do container API: $IP_API"

          mkdir -p $GITHUB_WORKSPACE/zap-work
          chmod -R 777 $GITHUB_WORKSPACE/zap-work

          docker run --rm \
            --network zap-net \
            -v $GITHUB_WORKSPACE/zap-work:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://$IP_API:${{ env.PORTA_API }} \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html \
            -I

      # 8. DAST adicional: Usando Nikto para verificação complementar
      - name: Executar Verificação Nikto
        run: |
          IP_API=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          docker run --rm --network zap-net sullo/nikto -h http://$IP_API:${{ env.PORTA_API }} -o resultados_nikto.html
          mkdir -p $GITHUB_WORKSPACE/nikto-reports
          cp resultados_nikto.html $GITHUB_WORKSPACE/nikto-reports/

      # 9. SAST: Finalizar Análise SonarCloud
      - name: Concluir Análise SonarCloud
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # 10. SAST: Executar Verificação de Código Seguro .NET (versão corrigida)
      - name: Instalar Security Code Scan
        run: dotnet tool install --global security-scan
        
      - name: Executar Security Code Scan
        run: |
          # Navegar para o diretório do projeto
          cd ./LibraryOnlineRentalSystem
          
          # Executar a verificação
          dotnet security-scan --severity high medium --fail-on-warnings true
          
          # Mover resultados para pasta de relatórios
          mkdir -p $GITHUB_WORKSPACE/sast-reports
          mv *.sarif $GITHUB_WORKSPACE/sast-reports/ || echo "Nenhum relatório SARIF gerado"

      # 11. Enviar todos os relatórios
      - name: Enviar Relatórios
        uses: actions/upload-artifact@v4
        with:
          name: relatorios-seguranca
          path: |
            zap-work/
            nikto-reports/
            contrast-agent/contrast.log

      # 12. Parar containers
      - name: Parar Container
        if: always()
        run: docker stop api && docker rm api

      # 13. IAST: Enviar resultados do Contrast (opcional)
      - name: Enviar Resultados do Contrast
        if: always()
        run: |
          # Normalmente envolveria chamar a API do Contrast para obter resultados
          # ou analisar os logs do agente em busca de vulnerabilidades
          echo "Os resultados do IAST seriam processados aqui"