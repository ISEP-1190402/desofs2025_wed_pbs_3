name: .NET API Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 5000
  PROJECT_DIR: ./LibraryOnlineRentalSystem

jobs:
  security-scans:
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Aumentado para 30 minutos

    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4.1.1

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Verificação de arquivos
      - name: Verify files
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          echo "Conteúdo do diretório:"
          ls -la
          echo "Verificando Dockerfile:"
          cat Dockerfile || { echo "ERRO: Dockerfile não encontrado"; exit 1; }

      # 4. Build Docker Image
      - name: Build Docker Image
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          docker build -t $DOCKER_IMAGE_NAME . || { echo "ERRO: Falha no build"; exit 1; }

      # 5. Criar rede Docker
      - name: Create Docker Network
        run: docker network create zap-net

      # 6. Iniciar API Container com verificação
      - name: Run and Verify API Container
        run: |
          # Inicia o container
          docker run -d \
            --name api \
            --network zap-net \
            -p $API_PORT:$API_PORT \
            $DOCKER_IMAGE_NAME || { echo "ERRO: Falha ao iniciar container"; exit 1; }
          
          # Verifica se a API está respondendo
          echo "Aguardando API iniciar..."
          for i in {1..10}; do
            if docker run --network zap-net curlimages/curl \
              curl -sSf http://api:$API_PORT >/dev/null; then
              echo "API respondendo com sucesso!"
              break
            fi
            echo "Tentativa $i/10 - API não respondendo, aguardando..."
            sleep 5
          done
          
          # Falha se a API não responder
          docker run --network zap-net curlimages/curl \
            curl -sSf http://api:$API_PORT || { echo "ERRO: API não respondeu após 50 segundos"; exit 1; }

      # 7. SonarScanner
      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Start SonarCloud Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"jorgealmeidadeveloper_LibraryOnlineRentalSystem" \
            /o:"jorgealmeidadeveloper" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.dotnet.buildConfiguration="Release"

      # 8. Debug de rede
      - name: Debug Network
        run: |
          echo "--- Containers ativos ---"
          docker ps -a
          echo "--- Teste de conexão ---"
          docker run --network zap-net curlimages/curl \
            curl -v http://api:$API_PORT
          echo "--- IP do container API ---"
          docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api

      # 9. Scan ZAP
      - name: Run OWASP ZAP Scan
        run: |
          # Prepara diretório para relatórios
          mkdir -p zap-reports
          chmod -R 777 zap-reports

          # Executa o scan
          docker run --rm \
            --network zap-net \
            -v $(pwd)/zap-reports:/zap/wrk:rw \
            -e ZAP_JVM_ARGS="-Dnetwork.connection.timeout=20" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://api:$API_PORT \
            -J /zap/wrk/report_json.json \
            -w /zap/wrk/report_md.md \
            -r /zap/wrk/report_html.html \
            -x report_xml.xml

      # 10. Upload de relatórios
      - name: Upload ZAP Reports
        uses: actions/upload-artifact@v4.3.3
        with:
          name: zap-security-reports
          path: |
            zap-reports/report_html.html
            zap-reports/report_json.json
            zap-reports/report_md.md
            zap-reports/report_xml.xml

      # 11. Limpeza
      - name: Cleanup
        if: always()
        run: |
          docker stop api || true
          docker rm api || true
          docker network rm zap-net || true