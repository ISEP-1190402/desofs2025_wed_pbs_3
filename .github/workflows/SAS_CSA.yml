name: .NET API Security Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: library-api
  API_PORT: 8080
  PROJECT_DIR: ./LibraryOnlineRentalSystem  # Pasta do projeto
  CSPROJ_PATH: ./LibraryOnlineRentalSystem/LibraryOnlineRentalSystem.csproj  # Caminho exato

jobs:
  security-scans_CSA_SAST:
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      # 1. Checkout
      - name: Checkout
        uses: actions/checkout@v4

      # 2. Setup .NET
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      # 3. Build do projeto
      - name: Build .NET Project
        working-directory: ${{ env.PROJECT_DIR }}
        run: dotnet build "${{ env.CSPROJ_PATH }}" --configuration Release

      # 4. Build Docker
      - name: Build Docker Image
        working-directory: ${{ env.PROJECT_DIR }}
        run: docker build -t $DOCKER_IMAGE_NAME .

      # 5. Snyk Scan (vers√£o corrigida)
      - name: Setup Snyk CLI
        uses: snyk/actions/setup@v3
        with:
          version: latest

      - name: Run Snyk Test
        working-directory: ${{ env.PROJECT_DIR }}
        run: snyk test --file="${{ env.CSPROJ_PATH }}" --severity-threshold=medium
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      # 6. Docker Network
      - name: Create Docker Network
        run: docker network create zap-net

      - name: Run API Container
        run: |
          docker run -d \
            --name api \
            --network zap-net \
            -p $API_PORT:$API_PORT \
            $DOCKER_IMAGE_NAME
        sleep 10

      # 7. SonarCloud
      - name: Install SonarScanner
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Start SonarCloud Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"jorgealmeidadeveloper_LibraryOnlineRentalSystem" \
            /o:"jorgealmeidadeveloper" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.dotnet.buildConfiguration="Release"

      # 8. OWASP ZAP Scan
      - name: Run OWASP ZAP Scan
        run: |
          API_IP=$(docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' api)
          echo "API container IP: $API_IP"

          mkdir -p $GITHUB_WORKSPACE/zap-work
          chmod -R 777 $GITHUB_WORKSPACE/zap-work

          docker run --rm \
            --network zap-net \
            -v $GITHUB_WORKSPACE/zap-work:/zap/wrk:rw \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py \
            -t http://$API_IP:${{ env.API_PORT }} \
            -J report_json.json \
            -w report_md.md \
            -r report_html.html \
            -I

      # 9. Upload reports
      - name: Upload ZAP reports
        uses: actions/upload-artifact@v4
        with:
          name: zap-reports
          path: zap-work/

      # 10. Cleanup
      - name: Stop Container
        if: always()
        run: docker stop api && docker rm api || true